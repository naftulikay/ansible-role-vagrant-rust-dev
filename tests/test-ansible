#!/bin/bash

BASEDIR=$(dirname "$0")

RED="\033[0;31m"
BLUE="\033[01;34m"
GREEN="\033[0;32m"
YELLOW="\033[01;33m"
NC="\033[39m"
BOLD="\033[1m"
NB="\033[21m"
RST="\033[0m"

declare -g -A COLORS
COLORS=(
  [RED]="\033[0;31m"
  [BLUE]="\033[01;34m"
  [GREEN]="\033[0;32m"
  [YELLOW]="\033[01;33m"
  [NOCOLOR]="\033[39m"
  [BOLD]="\033[1m"
  [NOBOLD]="\033[21m"
  [RESET]="\033[0m"
)

function log() {
  echo $@
}

function success() {
  local text=$@
  echo -e "${COLORS[GREEN]}${COLORS[BOLD]}${text}${COLORS[RESET]}"
}

function error() {
  local text=$@
  echo -e "${COLORS[RED]}${COLORS[BOLD]}${text}${COLORS[RESET]}" >&2
}

function setup() {
  # create an ansible configuration file that pushes roles two steps up
  printf '[defaults]\nroles_path=../../' > ansible.cfg
}

function check-syntax() {
  # check the syntax of the playbook
  ansible-playbook -vvv test-playbook.yml --syntax-check
}

function run-playbook() {
  ansible-playbook --extra-vars="@vars.json" test-playbook.yml
}

function test-idempotence() {
  # source .bashrc to get potentially updated PATH
  source ~/.bash_profile
  source ~/.bashrc

  env

  local tmplog="$(mktemp)"
  run-playbook | tee $tmplog

  if grep -q 'changed=0.*failed=0' $tmplog ; then
    success 'Idempotence Test: Pass'
  else
    error 'Idempotence Test: Fail'
    return 1
  fi
}

function main() {
  cd "$BASEDIR"

  # prepare
  setup
  # run tests
  check-syntax
  run-playbook
  test-idempotence
}

if [[ ${BASH_SOURCE[0]} == $0 ]]; then
  set -e
  main $@
fi
